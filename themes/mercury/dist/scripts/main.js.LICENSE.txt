/* eslint-disable max-params */

/* eslint-disable promise/prefer-await-to-then */

/* eslint-disable-next-line no-invalid-this */

/* eslint-enable max-params */

/* globals console: false */

/* import() */

/* jshint browser: true, strict: true, undef: true, unused: true */

/* jshint unused: true, undef: true, strict: true */

/* webpack/runtime/create fake namespace object */

/* webpack/runtime/jsonp chunk loading */

/* webpack/runtime/load script */

/*!
 * Flickity v2.2.2
 * Touch, responsive, flickable carousels
 *
 * Licensed GPLv3 for open source use
 * or Flickity Commercial License for commercial use
 *
 * https://flickity.metafizzy.co
 * Copyright 2015-2021 Metafizzy
 */

/*!
 * Unidragger v2.3.1
 * Draggable base class
 * MIT license
 */

/*!
 * Unipointer v2.3.0
 * base class for doing one thing with pointer event
 * MIT license
 */

/*!
 * getSize v2.0.3
 * measure size of elements
 * MIT license
 */

/*!
 * in-view 0.6.1 - Get notified when a DOM element enters or exits the viewport.
 * Copyright (c) 2016 Cam Wiegert <cam@camwiegert.com> - https://camwiegert.github.io/in-view
 * License: MIT
 */

/*#__PURE__*/

/**
     * @name handler
     * @function
     * @param {Object} data Event data.
     */

/**
     * @param {String} name Event name.
     * @param {Object} data Event data.
     */

/**
     * @param {String} name Event name.
     * @param {handler} handler
     * @return {listener}
     */

/**
     * @param {listener}
     */

/**
   * Chrome & Safari measure the outer-width on style.width on border-box elems
   * IE11 & Firefox<29 measures the inner-width
   */

/**
 * @param {Integer} index - index of the slide
 * @param {Boolean} isWrap - will wrap-around to last/first if at the end
 * @param {Boolean} isInstant - will immediately set position at selected cell
 */

/**
 * @param {Integer} shift - 0, 1, or -1
 */

/**
 * @see https://developers.google.com/youtube/iframe_api_reference#Events
 * `volumeChange` is not officially supported but seems to work
 * it emits an object: `{volume: 82.6923076923077, muted: false}`
 */

/**
 * @see https://developers.google.com/youtube/iframe_api_reference#Functions
 */

/**
 * @see https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player
 */

/**
 * @typedef YT.Player
 * @see https://developers.google.com/youtube/iframe_api_reference
 * */

/**
 * A factory function used to produce an instance of YT.Player and queue function calls and proxy events of the resulting object.
 *
 * @param maybeElementId Either An existing YT.Player instance,
 * the DOM element or the id of the HTML element where the API will insert an <iframe>.
 * @param options See `options` (Ignored when using an existing YT.Player instance).
 * @param strictState A flag designating whether or not to wait for
 * an acceptable state when calling supported functions. Default: `false`.
 * See `FunctionStateMap.js` for supported functions and acceptable states.
 */

/**
 * Add or remove start event
 * @param {Boolean} isAdd
 */

/**
 * Add or remove start event
 * @param {Boolean} isAdd - remove if falsey
 */

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

/**
 * Colors.
 */

/**
 * Construct an object that defines an event handler for all of the YouTube
 * player events. Proxy captured events through an event emitter.
 *
 * @todo Capture event parameters.
 * @see https://developers.google.com/youtube/iframe_api_reference#Events
 */

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

/**
 * Delays player API method execution until player state is ready.
 *
 * @todo Proxy all of the methods using Object.keys.
 * @todo See TRICKY below.
 * @param playerAPIReady Promise that resolves when player is ready.
 * @param strictState A flag designating whether or not to wait for
 * an acceptable state when calling supported functions.
 * @returns {Object}
 */

/**
 * Disable debug output.
 *
 * @api public
 */

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

/**
 * EvEmitter v1.1.0
 * Lil' event emitter
 * MIT License
 */

/**
 * Fizzy UI utils v2.0.7
 * MIT license
 */

/**
 * Helpers.
 */

/**
 * Insert, prepend, or append cells
 * @param {[Element, Array, NodeList]} elems - Elements to insert
 * @param {Integer} index - Zero-based number to insert
 */

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

/**
 * Pluralization helper.
 */

/**
 * Previous log timestamp.
 */

/**
 * Remove cells
 * @param {[Element, Array, NodeList]} elems - ELements to remove
 */

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/**
 * The currently active debug mode names, and names to skip.
 */

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

/**
 * allow user to initialize classes via [data-namespace] or .js-namespace class
 * htmlInit( Widget, 'widgetName' )
 * options are parsed from data-namespace-options
 */

/**
 * cell.getSize() on multiple cells
 * @param {Array} cells - cells to size
 */

/**
 * class to handle loading images
 * @param {Image} img - Image element
 * @param {Flickity} flickity - Flickity instance
 */

/**
 * drag move
 * @param {Event} event
 * @param {Event or Touch} pointer
 */

/**
 * emits events via eventEmitter and jQuery events
 * @param {String} type - name of event
 * @param {Event} event - original event
 * @param {Array} args - extra arguments
 */

/**
 * get Flickity instance from element
 * @param {[Element, String]} elem - element or selector string
 * @returns {Flickity} - Flickity instance
 */

/**
 * get Flickity.Cell, given an Element
 * @param {Element} elem - matching cell element
 * @returns {Flickity.Cell} cell - matching cell
 */

/**
 * get cell elements
 * @returns {Array} cellElems
 */

/**
 * get cells adjacent to a slide
 * @param {Integer} adjCount - number of adjacent slides
 * @param {Integer} index - index of slide to start
 * @returns {Array} cells - array of Flickity.Cells
 */

/**
 * get collection of Flickity.Cells, given Elements
 * @param {[Element, Array, NodeList]} elems - multiple elements
 * @returns {Array} cells - Flickity.Cells
 */

/**
 * get parent cell from an element
 * @param {Element} elem - child element
 * @returns {Flickit.Cell} cell - parent cell
 */

/**
 * getStyle, get style of element, check for Firefox bug
 * https://bugzilla.mozilla.org/show_bug.cgi?id=548397
 */

/**
 * given resting X and distance to selected cell
 * get the distance and index of the closest cell
 * @param {Number} restingX - estimated post-flick resting position
 * @param {Number} distance - distance to selected cell
 * @param {Integer} increment - +1 or -1, going up or down
 * @returns {Object} - { distance: {Number}, index: {Integer} }
 */

/**
 * logic any time a cell is changed: added, removed, or size changed
 * @param {Integer} changedCellIndex - index of the changed cell, optional
 * @param {Boolean} isPositioningSlider - Positions slider after selection
 */

/**
 * logic to be run after a cell's size changes
 * @param {Element} elem - cell's element
 */

/**
 * matchesSelector v2.0.2
 * matchesSelector( element, '.selector' )
 * MIT license
 */

/**
 * measure distance between x and a slide target
 * @param {Number} x - horizontal position
 * @param {Integer} index - slide index
 * @returns {Number} - slide distance
 */

/**
 * pointer cancel
 * @param {Event} event
 * @param {Event or Touch} pointer
 * @private
 */

/**
 * pointer move
 * @param {Event} event
 * @param {Event or Touch} pointer
 * @private
 */

/**
 * pointer start
 * @param {Event} event
 * @param {Event or Touch} pointer
 */

/**
 * pointer up
 * @param {Event} event
 * @param {Event or Touch} pointer
 * @private
 */

/**
 * pointer up
 * @param {Event} event
 * @param {Event or Touch} pointer
 */

/**
 * position certain cells
 * @param {Integer} index - which cell to start with
 */

/**
 * select slide from number or cell element
 * @param {[Element, Number]} value - zero-based index or element to select
 * @param {Boolean} isWrap - enables wrapping around for extra index
 * @param {Boolean} isInstant - disables slide animation
 */

/**
 * select slide from number or cell element
 * @param {[Element, String, Number]} selector - element, selector string, or index
 * @returns {Flickity.Cell} - matching cell
 */

/**
 * set options
 * @param {Object} opts - options to extend
 */

/**
 * setup
 * check isBoxSizerOuter
 * do on first getSize() rather than on page load for Firefox bug
 */

/**
 * turn elements into Flickity.Cells
 * @param {[Array, NodeList, HTMLElement]} elems - elements to make into cells
 * @returns {Array} items - collection of new Flickity Cells
 */

/**
* @link https://github.com/gajus/sister for the canonical source repository
* @license https://github.com/gajus/sister/blob/master/LICENSE BSD 3-Clause
*/

/************************************************************************/

/******/

/***/

/*------------------------------------------------------------------
  Sticky header  
  ------------------------------------------------------------------*/

/*------------------------------------------------------------------
Components
------------------------------------------------------------------*/

/*------------------------------------------------------------------
Debug Grid
------------------------------------------------------------------*/

/*------------------------------------------------------------------
Helpers
------------------------------------------------------------------*/

/*------------------------------------------------------------------
Import external
------------------------------------------------------------------*/

/*------------------------------------------------------------------
Import modules
------------------------------------------------------------------*/

/*------------------------------------------------------------------
Import styles
------------------------------------------------------------------*/

/*------------------------------------------------------------------
Imports
------------------------------------------------------------------*/

/*global define: false, module: false */

/*jshint browser: true, strict: true, undef: true, unused: true */

/*jshint browser: true, undef: true, unused: true, strict: true */

/*jshint browser: true, unused: true, undef: true, strict: true */

//

//    #Browser_compatibility

// #457, RubaXa/Sortable#973

// (the user may have provided their own)

// -----  ----- //

// ----- bind start ----- //

// ----- contain ----- //

// ----- create ----- //

// ----- debounceMethod ----- //

// ----- defaults ----- //

// ----- docReady ----- //

// ----- end event ----- //

// ----- extend ----- //

// ----- filterFindElements ----- //

// ----- focus ----- //

// ----- getParent ----- //

// ----- getQueryElement ----- //

// ----- handleEvent ----- //

// ----- htmlInit ----- //

// ----- keydown ----- //

// ----- modulo ----- //

// ----- mouseenter/leave ----- //

// ----- move ----- //

// ----- move event ----- //

// ----- onclick ----- //

// ----- pointer cancel ----- //

// ----- pointer done ----- //

// ----- removeFrom ----- //

// ----- resize ----- //

// ----- scroll ----- //

// ----- start event ----- //

// ----- staticClick ----- //

// ----- up ----- //

// ----- utils ----- //

// --------------------------  -------------------------- //

// -------------------------- Flickity -------------------------- //

// -------------------------- Flickity prototype -------------------------- //

// -------------------------- LazyLoader -------------------------- //

// -------------------------- PageDots -------------------------- //

// -------------------------- Player -------------------------- //

// -------------------------- PrevNextButton -------------------------- //

// -------------------------- Unidragger -------------------------- //

// -------------------------- add/remove cell prototype -------------------------- //

// -------------------------- animate -------------------------- //

// -------------------------- box sizing -------------------------- //

// -------------------------- destroy -------------------------- //

// -------------------------- drag -------------------------- //

// -------------------------- drag prototype -------------------------- //

// -------------------------- dragging -------------------------- //

// -------------------------- events -------------------------- //

// -------------------------- extras -------------------------- //

// -------------------------- get cells -------------------------- //

// -------------------------- getSize -------------------------- //

// -------------------------- getStyle -------------------------- //

// -------------------------- helpers -------------------------- //

// -------------------------- measurements -------------------------- //

// -------------------------- physics -------------------------- //

// -------------------------- pointer events -------------------------- //

// -------------------------- prototype -------------------------- //

// -------------------------- select -------------------------- //

// -------------------------- setup -------------------------- //

// 0 means "already installed".

// CONCATENATED MODULE: ./themes/mercury/source/scripts/app.js

// CONCATENATED MODULE: ./themes/mercury/source/scripts/components/inview.js

// Check if module is in cache

// Create a new module (and put it into the cache)

// EXTERNAL MODULE: ./node_modules/in-view/dist/in-view.min.js

// EXTERNAL MODULE: ./themes/mercury/source/scripts/components/grid.js

// EXTERNAL MODULE: ./themes/mercury/source/scripts/components/imageText.js

// EXTERNAL MODULE: ./themes/mercury/source/scripts/components/search.js

// Execute the module function

// Flickity main

// Flickity.Cell

// HACK - add seemingly innocuous handler to fix iOS 10 scroll behavior

// HACK iOS does not allow touch events to bubble up?!

// HACK, set flag so dragging stays in correct direction

// HACK: reset ticks if stopped and started within interval

// HACK: selectedCell & selectedElement is first cell in slide, backwards compatibility

// If debug isn't set in LS, and we're in Electron, try to load $DEBUG

// JSONP chunk loading for javascript

// NB: In an Electron preload script, document will be defined but not fully

// Player API, don't hate the ... thanks I know where the door is

// Pointer Events

// Remove in v3?

// Return the exports of the module

// Safari 9 overrides pageX and pageY. These values needs to be copied. #779

// Safari 9 overrides pageX and pageY. These values needs to be copied. flickity#842

// TODO refactor this, selecting here feels weird

// TODO remove scrollTo once focus options gets more support

// TODO updateDraggable on resize? if groupCells & slides change

// TODO: Just spread the args into the function once Babel is fixed:

// TODO: position can be lost between groups of various numbers

// TRICKY: For functions like `seekTo`, a change in state must be

// TRICKY: `seekTo` may not cause a state change if no buffering is

// The API will call this function when page has finished downloading

// The chunk loading function for additional chunks

// The module cache

// The require function

// This entry need to be wrapped in an IIFE because it need to be in strict mode.

// This file contains only the entry chunk.

// This function allow to reference all chunks

// This function allow to reference async chunks

// Touch Events. iOS Safari

// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded

// a Promise means "currently loading".

// activate if :after { content: 'flickity' }

// adaptiveHeight: false,

// add "moreModules" to the modules object,

// add cells with document fragment

// add distance for wrap-around slides

// add elem if no selector

// add event

// add id for Flickity.data

// add jQuery

// add listeners from on option

// add padding and border unless it's already including it

// add to DOM

// add to this.cells

// add, remove cell

// alias _init for jQuery plugin .flickity()

// all cells fit inside gallery

// all chunks have JS

// allow element to focusable

// already activated, select previous selectedIndex

// also measure maxCellHeight

// animate

// animate next frame

// any 'auto', 'medium' value will be 0

// anything else let's inspect with %O

// append cells to a document fragment

// append to slider

// append, add to end

// apply any `formatters` transformations

// apply env-specific formatting (colors, etc.)

// apply selection

// arguments passed either before or after the %c, so we need to

// associate via id

// asume maybeElementId can be rendered inside

// avoid mem leaks in IE.

// backwards compatibility

// bail if invalid index

// base pointer move logic

// because even IE9 works not like others

// bind each handle

// bind events to node

// bind move and end events

// blur

// boost selection if selected index has not changed

// but use 2D when settled, for better font-rendering

// button = 0 is okay, 1-4 not

// cancel click/tap if scroll is too much

// cell align, then based on origin side

// cellSelector: undefined,

// change event if new index

// change the position to drag position by applying force

// check for _boundEvents, in case dragEnd triggered twice (old IE8 bug)

// check for the standard method name first

// check if cell element is lazy image

// check that elem is an actual element

// check un-prefixed

// check vendor prefixes

// click events

// collection of item elements

// concat childElems to filterFound array

// condition if pointer has moved far enough to start drag

// contain cell targets so no excess sliding

// contain each cell target

// contain slides target

// contain to bounds

// contain: false,

// copy over to avoid interference if .off() in listener

// create a fake namespace object

// create arrow

// create dots, array of elements

// create error before stack unwound to get useful stacktrace later

// create holder element

// create jQuery event

// create movement string

// create viewport & slider

// deactivate all Flickity functionality, but keep stuff available

// default pointerDown logic, used for staticClick

// default to 3 seconds

// default to append

// default to mouse events

// default trigger with type if no event

// default, group by width of slide

// define __esModule on exports

// define getter functions for harmony exports

// destroy cells

// disable dragging if less than 2 slides. #278

// disabled?

// dismiss clicks from right or middle buttons

// dismiss inputs with text fields. flickity#403, flickity#404

// dismiss right click and other pointers

// do async to allow for other scripts to run. metafizzy/flickity#441

// do not blur body for IE10, metafizzy/flickity#117

// do not blur if already focused

// do not boost if no previousDragX or dragMoveTime

// do not drag if not dragging yet

// do not free-scroll if going outside of bounding slides

// do not initialize twice on same element

// do not play if page is hidden, start playing when page is visible

// do not position slider after lazy load

// do not proceed on non-objects

// do not select invalid selectors from hash: #123, #/. #791

// do not tick if not playing

// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632

// doesn't fit, new slide

// don't proceed if no dots

// double check webkit in userAgent just in case we are in a worker

// drag

// dragEnd

// dragMove

// dragStart

// enable .ontype to trigger from .addEventListener( elem, 'type' )

// enable is wrapAround and at least 2 slides

// ending gap between last cell and end of gallery viewport

// env-specific initialization logic for debug instances

// eslint-disable-line promise/prefer-await-to-then

// eslint-disable-next-line no-extra-parens

// eslint-disable-next-line no-warning-comments

// eslint-disable-next-line prefer-spread

// eslint-disable-next-line promise/catch-or-return

// events

// expando

// explicitly

// expose the modules object (__webpack_modules__)

// extends objects

// figure out the correct index to insert the CSS into

// filter

// filter & find items if we have a selector

// find children

// first cell stuff

// first check if elem is cell

// flag for initial activation, for using initialIndex

// friction when free-scrolling

// friction when selecting

// get SVG path movmement

// get a number from a string, not a percentage

// get adjacent cells, use lazyLoad option for adjacent count

// get after cells

// get all measurements

// get before cells

// get cell

// get cell from element

// get cellX

// get cells from children

// get clickedCell, if cell was clicked

// get difference between number of slides and number of dots

// get index of slides that has cell

// get proper events to match start event

// get src & srcset

// getDefaultExport function for compatibility with non-harmony modules

// globally unique identifiers

// go previous/next if left/right keys pressed

// go to shortest

// goes through all children

// group by number. 3 -> [0,1,2], [3,4,5], ...

// hack to fix scroll jump after focus, #76

// handle all clicks and prevent clicks when dragging

// hash of events to be bound after start event

// hash of methods triggered on _create()

// how far away from selected slide

// how many frames slider has been in same position

// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/

// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus ...

// https://github.com/babel/babel/issues/4270

// if contain, keep going if distance is equal to minDistance

// if free-scroll & not wrap around

// if hidden, everything is 0

// if we encounter an escaped % then don't increase the array index

// ignore empty strings

// ignore emulated mouse up clicks

// index of first or last slide, if previous or next

// inherit EvEmitter

// inherit EventEmitter

// inherit Unipointer & EvEmitter

// init as disabled

// initial gap

// initial physics properties

// initial properties

// initialIndex: 0,

// initialize

// initialized. Since we know we're in Chrome, we'll just detect this case

// input types that do not have text fields

// insert in this.cells

// install a JSONP callback for chunk loading

// internal store of all Flickity intances

// is firebug? http://stackoverflow.com/a/398120/376773

// is firefox >= v31?

// is webkit? http://stackoverflow.com/a/16459606/376773

// just add cell if first cell in slide

// keep adding cells until the cover the initial gap

// keep focus on element when child UI elements are clicked

// keep track of cellX for wrap-around

// kick things off

// kludge to blur previously focused input

// last slide

// lazyload

// left arrow

// listen for key presses

// listen to visibility change

// load lazy images

// loadScript function to load a script via script tag

// log error, do not initialize

// loop through cells to get the one that matches

// make array of elems

// make available via $().data('namespace')

// measure distance to next cell

// mode & 16: return value when it's Promise-like

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// move child elements back into element

// munge isAdd, default to true

// my thanks to Steven Wittens, who simplified this math greatly

// no HMR

// no HMR manifest

// no baseURI

// no module.id needed

// no module.loaded needed

// no on chunks loaded

// no prefetching

// no preloaded

// nodes that have text fields

// not a percent like '100%', and a number

// now we need to remove `args[index]` since it's inlined in the `format`

// object to store loaded and loading chunks

// old IE will ignore this and new IE will set onload

// old method name, backwards-compatible

// old v1 event name, remove in v3

// once stuff

// only add once

// only care about dot clicks

// only for wrap-around

// only work if element is in focus

// options

// or if drag was held for 100 ms

// original method

// page dots

// parse '75%

// pause auto-play on hover

// pause if page visibility is hidden, unpause if visible

// player & autoPlay

// pointer didn't move enough for drag to start

// pointerId for pointer events, touch.indentifier for touch events

// position all cells

// position slider

// positions all cells

// prepend, add to start

// prev/next buttons

// prevent button from submitting form http://stackoverflow.com/a/10836076/182183

// prevent clicks

// properties

// prototype so it can be overwriteable by Flickity

// public

// re-enable clicking async

// re-start play if paused

// ready event. #493

// remove attr

// remove before trigger to prevent recursion

// remove cells from collection & DOM

// remove from DOM

// remove listener

// remove selected class on previous

// remove visibility change event

// render position of cell with in slider

// render position with translateX when settled

// required.

// reset flag after 300ms

// reset properties

// reset style

// resume auto-play on hover off

// return empty array if undefined or null. #6

// returns the touch that we're keeping track of

// reverse if right-to-left

// reverse if right-to-left and using transform

// right arrow

// rotate arrow

// round value for browser zoom. desandro/masonry#928

// save pointer identifier to match up touch events

// save these arguments

// select instantly

// select lazy images in cell

// select with number

// select with selector string

// selected was previous index

// selectedIndex could be outside of slides, if triggered before resize()

// set `diff` timestamp

// set events hash

// set flag

// set flag for emulated clicks 300ms after touchend

// set flags

// set internal jQuery, for Webpack + jQuery v3, #478

// set listeners array

// set once flag

// set onceEvents hash

// set onceListeners object

// set selectedIndex based on where flick will end up

// set src & serset

// setDefaultTarget v1 method, backwards compatibility, remove in v3

// setup Promise in chunk cache

// setup once

// shift after cells

// shift before cells

// size all cells

// slide

// slider element does all the positioning

// slider positions the cells

// slides

// slow drag

// so as a fallback we always set onload

// so bounding slides can attract slider, and keep it in bounds

// some good legacy browsers (firefox) fail the 'in' detection above

// start 0 if positioning all cells

// start chunk loading

// start cloning at first cell, working forwards

// start drag if pointer has moved far enough to start drag

// start play

// start ticking

// state.

// stop animating if resting for 3 or more frames

// stop if it was moving

// stop wobble

// the JavaScript for the player API.

// the `console.log` function doesn't have 'apply'

// the final "%c" is somewhat tricky, because there could be other

// then flag all "chunkIds" as loaded and fire callback

// this hackery is required for IE8/9, where

// this.onload = null here is necessary

// touch-action: none to override browser touch gestures. metafizzy/flickity#540

// track scrolling

// track start event position

// trigger handler methods for events

// trigger listener

// triggered after pointer down & up with no/tiny movement

// triggered given that the resulting state could match the initial

// triggered on pointer up & pointer cancel

// try to get parent cell elem

// try to maintain position & select previous selected element

// turn element or nodeList into an array

// turn the `arguments` into a proper Array

// unbind events

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// universal module definition

// unselect previous selected slide

// unset once flag

// unshift previous cells

// update .selectedSlide

// update new selected slide

// update selected index for group slides, instant

// update selectedIndex

// update slidesWidth

// use 3D transforms for hardware acceleration on iOS

// use element as selector string

// use number as index

// use querySeletor if elem is string

// use shape as movement if string

// use string as selector, get element

// utility function for getting x/y coords from event

// vars

// visibility change event handler

// watches the :after property, activates/deactivates

// we only are interested in the *last* %c

// webpackBootstrap

// wrap around if at least 2 slides

// wrap around move. #589

// wrap position around

// wrap position so slider is within normal area

// wrap values

// wraps position for wrapAround, to move to closest slide. #113

// x comes from first cell
