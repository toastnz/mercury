{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,Y,C,I,I,E,I,K,E,W,C,E,a,C,C,ECAO,OAAM,EAQT,YAAY,CAAO,CAAE,CAEjB,IAAI,CAAC,SAAS,CAAG,EACjB,IAAI,CAAC,OAAO,CAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,eAC5C,IAAI,CAAC,OAAO,CAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,eAG5C,IAAI,CAAC,IAAI,EACb,CAQA,MAAO,CAGH,IAAI,CAAC,QAAQ,GAGb,IAAI,CAAC,iBAAiB,EAC1B,CAQA,UAAW,CACP,IAAI,CAAC,OAAO,CAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,SACrD,CAQA,QAAS,CACJ,IAAI,CAAC,OAAO,CAAI,IAAI,CAAC,KAAK,GAAK,IAAI,CAAC,IAAI,EAC7C,CAOA,mBAAoB,CAChB,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,QAAS,IAAM,IAAI,CAAC,MAAM,GAC9D,CAQA,YAAY,CAAK,CAAE,CAGf,IAAI,CAAC,OAAO,CAAG,EAGf,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAiB,EAE/C,CAQA,MAAO,CAGH,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,UAG7B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAG,OAC5B,IAAI,EAAS,IAAI,CAAC,OAAO,CAAC,YAAY,CAAG,IAGzC,CAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAG,EAG5B,WAAW,IAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAG,EAAQ,GAGrD,IAAI,CAAC,WAAW,CAAC,CAAA,EAErB,CAOA,OAAQ,CAGJ,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAG,EAG5B,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,gBAAiB,KAC3C,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,SACpC,EAAG,CAAE,KAAM,CAAA,CAAK,GAGhB,IAAI,CAAC,WAAW,CAAC,CAAA,EAErB,CACJ,C","sources":["<anon>","themes/mercury/source/scripts/components/accordion.js"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire0837\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7ORm4\", function(module, exports) {\n\n$parcel$export(module.exports, \"Accordion\", () => $5b16971b7bded655$export$a766cd26d0d69044);\nclass $5b16971b7bded655$export$a766cd26d0d69044 {\n    /**\n     * \n     * Constructor\n     * \n     * @param {element} element accordion parent\n     */ constructor(element){\n        this.accordion = element;\n        this.trigger = this.accordion.querySelector(\".js-trigger\");\n        this.content = this.accordion.querySelector(\".js-content\");\n        // Initialise the accordion\n        this.init();\n    }\n    /**\n     * \n     * Initialise the accordion item\n     * \n     */ init() {\n        // Get the initial state of the accordion\n        this.getState();\n        // Add the click event handler to the accordion\n        this.addEventListeners();\n    }\n    /**\n     * \n     * Get the current state of the accordion\n     * \n     */ getState() {\n        this.is_open = this.accordion.classList.contains(\"active\");\n    }\n    /**\n    * \n    * Toggle the current state of the accordion\n    * \n    */ toggle() {\n        this.is_open ? this.close() : this.open();\n    }\n    /**\n     * \n     * Add the click event handler to the accordion\n     * \n     */ addEventListeners() {\n        this.accordion.addEventListener(\"click\", ()=>this.toggle());\n    }\n    /**\n     * \n     * Add the click event handler to the accordion\n     * \n     */ updateState(state) {\n        // Update the current state\n        this.is_open = state;\n        // Update the aria-expanded attribute\n        this.trigger.setAttribute(\"aria-expanded\", state);\n    }\n    /**\n     * \n     * Open the accordion\n     * \n     */ open() {\n        // Add active class to the accordion\n        this.accordion.classList.add(\"active\");\n        // Quickly get the height we want to animate to\n        this.content.style.height = \"auto\";\n        var height = this.content.clientHeight + \"px\";\n        // Revert the heioght back to nothing\n        this.content.style.height = 0;\n        // Animate the height once the calculations are done\n        setTimeout(()=>this.content.style.height = height, 0);\n        // Update the current state\n        this.updateState(true);\n    }\n    /**\n     * \n     * Close the accordion\n     * \n     */ close() {\n        // Revert the height back to nothing\n        this.content.style.height = 0;\n        // Remove the active class once animations are over\n        this.content.addEventListener(\"transitionend\", ()=>{\n            this.accordion.classList.remove(\"active\");\n        }, {\n            once: true\n        });\n        // Update the current state\n        this.updateState(false);\n    }\n}\n\n});\n\n})();\n//# sourceMappingURL=accordion.179599c5.js.map\n","export class Accordion {\n\n    /**\n     * \n     * Constructor\n     * \n     * @param {element} element accordion parent\n     */\n    constructor(element) {\n\n        this.accordion = element;\n        this.trigger = this.accordion.querySelector('.js-trigger');\n        this.content = this.accordion.querySelector('.js-content');\n\n        // Initialise the accordion\n        this.init();\n    }\n\n\n    /**\n     * \n     * Initialise the accordion item\n     * \n     */\n    init() {\n\n        // Get the initial state of the accordion\n        this.getState();\n\n        // Add the click event handler to the accordion\n        this.addEventListeners();\n    }\n\n\n    /**\n     * \n     * Get the current state of the accordion\n     * \n     */\n    getState() {\n        this.is_open = this.accordion.classList.contains('active');\n    }\n\n\n    /**\n    * \n    * Toggle the current state of the accordion\n    * \n    */\n    toggle() {\n        (this.is_open) ? this.close() : this.open();\n    }\n\n    /**\n     * \n     * Add the click event handler to the accordion\n     * \n     */\n    addEventListeners() {\n        this.accordion.addEventListener('click', () => this.toggle());\n    }\n\n\n    /**\n     * \n     * Add the click event handler to the accordion\n     * \n     */\n    updateState(state) {\n\n        // Update the current state\n        this.is_open = state;\n\n        // Update the aria-expanded attribute\n        this.trigger.setAttribute('aria-expanded', state);\n\n    }\n\n\n    /**\n     * \n     * Open the accordion\n     * \n     */\n    open() {\n\n        // Add active class to the accordion\n        this.accordion.classList.add('active');\n\n        // Quickly get the height we want to animate to\n        this.content.style.height = 'auto';\n        var height = this.content.clientHeight + 'px';\n\n        // Revert the heioght back to nothing\n        this.content.style.height = 0;\n\n        // Animate the height once the calculations are done\n        setTimeout(() => this.content.style.height = height, 0);\n\n        // Update the current state\n        this.updateState(true);\n\n    }\n\n    /**\n     * \n     * Close the accordion\n     * \n     */\n    close() {\n\n        // Revert the height back to nothing\n        this.content.style.height = 0;\n\n        // Remove the active class once animations are over\n        this.content.addEventListener('transitionend', () => {\n            this.accordion.classList.remove('active');\n        }, { once: true });\n\n        // Update the current state\n        this.updateState(false);\n\n    }\n}\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$5b16971b7bded655$export$a766cd26d0d69044","set","s","enumerable","configurable","constructor","element","accordion","trigger","querySelector","content","init","getState","addEventListeners","is_open","classList","contains","toggle","close","open","addEventListener","updateState","state","setAttribute","add","style","height","clientHeight","setTimeout","remove","once"],"version":3,"file":"accordion.179599c5.js.map"}