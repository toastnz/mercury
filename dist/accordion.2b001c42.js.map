{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,S,E,C,E,M,A,C,E,Y,O,Q,U,O,O,Q,C,S,C,E,O,O,C,E,S,C,E,O,G,Y,O,Q,E,W,G,Q,I,O,S,C,S,O,C,C,E,E,C,S,E,C,C,C,E,I,I,E,E,E,E,M,C,I,C,I,E,C,C,E,A,C,E,U,C,E,U,E,C,E,E,Y,C,C,E,U,G,C,E,Q,C,C,C,E,O,c,C,E,A,S,C,E,I,E,A,S,C,C,C,E,G,A,W,E,I,A,O,E,O,E,I,E,C,C,O,W,C,C,G,A,K,I,E,C,I,E,E,I,C,E,G,W,G,A,W,E,G,O,C,O,A,U,+C,C,M,A,C,A,W,E,O,M,E,E,E,E,U,M,A,W,E,G,E,O,E,E,E,G,E,E,C,C,O,c,C,E,O,C,a,C,M,C,C,G,E,O,C,S,C,K,ECAsBK,EAAAA,OAAAA,CAAAiC,SAAA,CAATA,e,EAQT,SAAAA,EAAYE,CAAO,EAAE+B,A,C,S,C,C,C,E,G,C,C,a,C,E,M,A,U,oC,C,EAAA,IAAA,CAAAjC,GAEjB,IAAI,CAACM,SAAS,CAAGJ,EACjB,IAAI,CAACK,OAAO,CAAG,IAAI,CAACD,SAAS,CAACE,aAAa,CAAC,eAC5C,IAAI,CAACC,OAAO,CAAG,IAAI,CAACH,SAAS,CAACE,aAAa,CAAC,eAG5C,IAAI,CAACE,IAAI,EACb,CA0GC,O,E,AAvGDV,E,S,CAAAkC,CAAAA,CAAA/C,IAAAA,OAAAY,MAKA,WAGI,IAAI,CAACY,QAAQ,GAGb,IAAI,CAACC,iBAAiB,EAC1B,CAGA,EAAA,CAAAzB,IAAAA,WAAAY,MAKA,WACI,IAAI,CAACc,OAAO,CAAG,IAAI,CAACP,SAAS,CAACQ,SAAS,CAACC,QAAQ,CAAC,SACrD,CAGA,EAAA,CAAA5B,IAAAA,SAAAY,MAKA,WACK,IAAI,CAACc,OAAO,CAAI,IAAI,CAACG,KAAK,GAAK,IAAI,CAACC,IAAI,EAC7C,CAEA,EAAA,CAAA9B,IAAAA,oBAAAY,MAKA,WAAoB,IAAAmB,EAAA,IAAA,CAChB,IAAI,CAACZ,SAAS,CAACa,gBAAgB,CAAC,QAAS,WAAA,OAAMD,EAAKE,MAAM,EAAE,EAChE,CAGA,EAAA,CAAAjC,IAAAA,cAAAY,MAKA,SAAYsB,CAAK,EAGb,IAAI,CAACR,OAAO,CAAGQ,EAGf,IAAI,CAACd,OAAO,CAACe,YAAY,CAAC,gBAAiBD,EAE/C,CAGA,EAAA,CAAAlC,IAAAA,OAAAY,MAKA,WAAO,IAAAwB,EAAA,IAAA,CAGH,IAAI,CAACjB,SAAS,CAACQ,SAAS,CAACU,GAAG,CAAC,UAG7B,IAAI,CAACf,OAAO,CAACgB,KAAK,CAACC,MAAM,CAAG,OAC5B,IAAIA,EAAS,IAAI,CAACjB,OAAO,CAACkB,YAAY,CAAG,IAGzC,CAAA,IAAI,CAAClB,OAAO,CAACgB,KAAK,CAACC,MAAM,CAAG,EAG5BE,WAAW,WAAA,OAAML,EAAKd,OAAO,CAACgB,KAAK,CAACC,MAAM,CAAGA,CAAM,EAAE,GAGrD,IAAI,CAACG,WAAW,CAAC,CAAA,EAErB,CAEA,EAAA,CAAA1C,IAAAA,QAAAY,MAKA,WAAQ,IAAA+B,EAAA,IAAA,AAGJ,CAAA,IAAI,CAACrB,OAAO,CAACgB,KAAK,CAACC,MAAM,CAAG,EAG5B,IAAI,CAACjB,OAAO,CAACU,gBAAgB,CAAC,gBAAiB,WAC3CW,EAAKxB,SAAS,CAACQ,SAAS,CAACiB,MAAM,CAAC,SACpC,EAAG,CAAEC,KAAM,CAAA,CAAK,GAGhB,IAAI,CAACH,WAAW,CAAC,CAAA,EAErB,CAAC,EAAA,E,G,EAvGD7B,E,G,O,c,CAAAA,E,Y,C,S,C,C,GAuGCA,CAAA,G","sources":["<anon>","themes/mercury/source/scripts/components/accordion.js"],"sourcesContent":["(() => {\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire0837\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7ORm4\", function(module, exports) {\n\"use strict\";\nObject.defineProperty(module.exports, \"__esModule\", {\n    value: true\n});\nmodule.exports.Accordion = void 0;\nfunction $5b16971b7bded655$var$_typeof(o) {\n    \"@babel/helpers - typeof\";\n    return $5b16971b7bded655$var$_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, $5b16971b7bded655$var$_typeof(o);\n}\nfunction $5b16971b7bded655$var$_classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction $5b16971b7bded655$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, $5b16971b7bded655$var$_toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction $5b16971b7bded655$var$_createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) $5b16971b7bded655$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $5b16971b7bded655$var$_defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction $5b16971b7bded655$var$_toPropertyKey(arg) {\n    var key = $5b16971b7bded655$var$_toPrimitive(arg, \"string\");\n    return $5b16971b7bded655$var$_typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction $5b16971b7bded655$var$_toPrimitive(input, hint) {\n    if ($5b16971b7bded655$var$_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if ($5b16971b7bded655$var$_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nvar $5b16971b7bded655$var$Accordion = module.exports.Accordion = /*#__PURE__*/ function() {\n    /**\n   * \n   * Constructor\n   * \n   * @param {element} element accordion parent\n   */ function Accordion(element) {\n        $5b16971b7bded655$var$_classCallCheck(this, Accordion);\n        this.accordion = element;\n        this.trigger = this.accordion.querySelector(\".js-trigger\");\n        this.content = this.accordion.querySelector(\".js-content\");\n        // Initialise the accordion\n        this.init();\n    }\n    /**\n   * \n   * Initialise the accordion item\n   * \n   */ $5b16971b7bded655$var$_createClass(Accordion, [\n        {\n            key: \"init\",\n            value: function init() {\n                // Get the initial state of the accordion\n                this.getState();\n                // Add the click event handler to the accordion\n                this.addEventListeners();\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                this.is_open = this.accordion.classList.contains(\"active\");\n            }\n        },\n        {\n            key: \"toggle\",\n            value: function toggle() {\n                this.is_open ? this.close() : this.open();\n            }\n        },\n        {\n            key: \"addEventListeners\",\n            value: function addEventListeners() {\n                var _this = this;\n                this.accordion.addEventListener(\"click\", function() {\n                    return _this.toggle();\n                });\n            }\n        },\n        {\n            key: \"updateState\",\n            value: function updateState(state) {\n                // Update the current state\n                this.is_open = state;\n                // Update the aria-expanded attribute\n                this.trigger.setAttribute(\"aria-expanded\", state);\n            }\n        },\n        {\n            key: \"open\",\n            value: function open() {\n                var _this2 = this;\n                // Add active class to the accordion\n                this.accordion.classList.add(\"active\");\n                // Quickly get the height we want to animate to\n                this.content.style.height = \"auto\";\n                var height = this.content.clientHeight + \"px\";\n                // Revert the heioght back to nothing\n                this.content.style.height = 0;\n                // Animate the height once the calculations are done\n                setTimeout(function() {\n                    return _this2.content.style.height = height;\n                }, 0);\n                // Update the current state\n                this.updateState(true);\n            }\n        },\n        {\n            key: \"close\",\n            value: function close() {\n                var _this3 = this;\n                // Revert the height back to nothing\n                this.content.style.height = 0;\n                // Remove the active class once animations are over\n                this.content.addEventListener(\"transitionend\", function() {\n                    _this3.accordion.classList.remove(\"active\");\n                }, {\n                    once: true\n                });\n                // Update the current state\n                this.updateState(false);\n            }\n        }\n    ]);\n    return Accordion;\n}();\n\n});\n\n})();\n//# sourceMappingURL=accordion.2b001c42.js.map\n","export class Accordion {\n\n    /**\n     * \n     * Constructor\n     * \n     * @param {element} element accordion parent\n     */\n    constructor(element) {\n\n        this.accordion = element;\n        this.trigger = this.accordion.querySelector('.js-trigger');\n        this.content = this.accordion.querySelector('.js-content');\n\n        // Initialise the accordion\n        this.init();\n    }\n\n\n    /**\n     * \n     * Initialise the accordion item\n     * \n     */\n    init() {\n\n        // Get the initial state of the accordion\n        this.getState();\n\n        // Add the click event handler to the accordion\n        this.addEventListeners();\n    }\n\n\n    /**\n     * \n     * Get the current state of the accordion\n     * \n     */\n    getState() {\n        this.is_open = this.accordion.classList.contains('active');\n    }\n\n\n    /**\n    * \n    * Toggle the current state of the accordion\n    * \n    */\n    toggle() {\n        (this.is_open) ? this.close() : this.open();\n    }\n\n    /**\n     * \n     * Add the click event handler to the accordion\n     * \n     */\n    addEventListeners() {\n        this.accordion.addEventListener('click', () => this.toggle());\n    }\n\n\n    /**\n     * \n     * Add the click event handler to the accordion\n     * \n     */\n    updateState(state) {\n\n        // Update the current state\n        this.is_open = state;\n\n        // Update the aria-expanded attribute\n        this.trigger.setAttribute('aria-expanded', state);\n\n    }\n\n\n    /**\n     * \n     * Open the accordion\n     * \n     */\n    open() {\n\n        // Add active class to the accordion\n        this.accordion.classList.add('active');\n\n        // Quickly get the height we want to animate to\n        this.content.style.height = 'auto';\n        var height = this.content.clientHeight + 'px';\n\n        // Revert the heioght back to nothing\n        this.content.style.height = 0;\n\n        // Animate the height once the calculations are done\n        setTimeout(() => this.content.style.height = height, 0);\n\n        // Update the current state\n        this.updateState(true);\n\n    }\n\n    /**\n     * \n     * Close the accordion\n     * \n     */\n    close() {\n\n        // Revert the height back to nothing\n        this.content.style.height = 0;\n\n        // Remove the active class once animations are over\n        this.content.addEventListener('transitionend', () => {\n            this.accordion.classList.remove('active');\n        }, { once: true });\n\n        // Update the current state\n        this.updateState(false);\n\n    }\n}\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$5b16971b7bded655$var$_typeof","o","Symbol","iterator","constructor","prototype","$5b16971b7bded655$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","$5b16971b7bded655$var$_toPropertyKey","arg","key","$5b16971b7bded655$var$_toPrimitive","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","value","Accordion","staticProps","element","$5b16971b7bded655$var$_classCallCheck","instance","Constructor","accordion","trigger","querySelector","content","init","getState","addEventListeners","is_open","classList","contains","close","open","_this","addEventListener","toggle","state","setAttribute","_this2","add","style","height","clientHeight","setTimeout","updateState","_this3","remove","once","_classCallCheck","_createClass"],"version":3,"file":"accordion.2b001c42.js.map"}